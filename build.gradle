plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.linguica.maven-settings' version "${maven_settings_version}"
    id "de.undercouch.download" version "${gradle_download_task_version}"
}

group = 'de.maxhenkel.rnnoise4j'
archivesBaseName = 'rnnoise4j'
version = library_version

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

tasks.named('sourcesJar', Jar) {
    exclude 'natives/**'
    exclude '**/*.bin'
}

def generatedResourcesDir = layout.buildDirectory.dir("generated-resources")

sourceSets {
    main {
        resources {
            srcDir generatedResourcesDir
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    testImplementation platform("org.junit:junit-bom:${junit_version}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'RNNoise4J'
                description = 'RNNoise Wrapper for Java'
                url = 'https://maxhenkel.de'
            }
        }
    }
    repositories {
        maven {
            name = 'henkelmax.public'
            url = uri('https://maven.maxhenkel.de/repository/public')
        }
    }
}

tasks.register("fetchWeights", Download) {
    src "https://github.com/henkelmax/rnnoise-weights/releases/download/v0.2/weights_blob_small.bin"
    dest generatedResourcesDir.get().file("rnnoise/weights_blob.bin")
    onlyIfModified true
}

tasks.named("processResources") {
    dependsOn("fetchWeights")
}

def platforms = [
        [
                name  : 'windows-x64',
                file  : 'zig-x86_64-windows-gnu.cmake',
                res   : 'windows-x64',
                libExt: 'dll'
        ],
        [
                name  : 'windows-arm64',
                file  : 'zig-aarch64-windows-gnu.cmake',
                res   : 'windows-aarch64',
                libExt: 'dll'
        ],
        [
                name  : 'linux-x64',
                file  : 'zig-x86_64-linux-gnu.cmake',
                res   : 'linux-x64',
                libExt: 'so'
        ],
        [
                name  : 'linux-arm64',
                file  : 'zig-aarch64-linux-gnu.cmake',
                res   : 'linux-aarch64',
                libExt: 'so'
        ],
        [
                name  : 'macos-x64',
                file  : 'zig-x86_64-macos.cmake',
                res   : 'mac-x64',
                libExt: 'dylib'
        ],
        [
                name  : 'macos-arm64',
                file  : 'zig-aarch64-macos.cmake',
                res   : 'mac-aarch64',
                libExt: 'dylib'
        ],
]

platforms.each { target ->
    def safeName = target.name.capitalize().replace('-', '')
    def configureTask = "configureNatives${safeName}"
    def buildTask = "buildNatives${safeName}"
    def copyTask = "copyNatives${safeName}"

    def cmakeListsPath = "../../CMakeLists.txt"
    def cmakePlatformPath = "../../cmake/${target.file}"
    def buildDir = layout.projectDirectory.dir("native/build/${target.res}")
    def resourceDir = generatedResourcesDir.get().dir("natives/${target.res}")
    def cSourcesDir = layout.projectDirectory.dir('native/src')
    def outputName = "librnnoise4j.${target.libExt}"

    tasks.register(configureTask, Exec) {
        group = 'natives'
        description = "CMake configure for ${target.name}"
        workingDir = buildDir

        inputs.file(buildDir.file(cmakeListsPath))
        inputs.file(buildDir.file(cmakePlatformPath))
        inputs.dir(cSourcesDir)
        outputs.dir(buildDir)

        doFirst {
            def dir = buildDir.asFile
            if (dir.exists()) {
                logger.lifecycle("Cleaning ${dir}")
                project.delete(fileTree(dir: dir))
            }
            dir.mkdirs()
        }

        commandLine 'cmake',
                "-DCMAKE_TOOLCHAIN_FILE=${cmakePlatformPath}",
                '-DCMAKE_BUILD_TYPE=Release',
                '-G', 'Ninja',
                '../..'
    }

    tasks.register(buildTask, Exec) {
        group = 'natives'
        description = "Build natives for ${target.name}"
        workingDir = buildDir
        dependsOn configureTask

        inputs.dir(buildDir)
        outputs.dir(buildDir)

        commandLine 'cmake', '--build', '.', '--config', 'Release'
    }

    tasks.register(copyTask, Copy) {
        group = 'natives'
        description = "Copy ${target.name} natives into resources"
        dependsOn buildTask

        from buildDir.file(outputName)
        into resourceDir
    }
}

tasks.register('buildAndCopyAllNatives') {
    group = 'natives'
    description = 'Build & copy all native libraries for every platform/arch'
    dependsOn platforms.collect { "copyNatives${it.name.capitalize().replace('-', '')}" }
}

tasks.named('processResources') {
    dependsOn 'buildAndCopyAllNatives'
}

tasks.named("clean", Delete).configure {
    delete("native/build")
}
