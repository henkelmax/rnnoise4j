if (CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    set(CUSTOM_CC ${CMAKE_CURRENT_LIST_DIR}/zig-cc.bat)
    set(CUSTOM_AR ${CMAKE_CURRENT_LIST_DIR}/zig-ar.bat)
    set(CUSTOM_RANLIB ${CMAKE_CURRENT_LIST_DIR}/zig-ranlib.bat)
else ()
    set(CUSTOM_CC ${CMAKE_CURRENT_LIST_DIR}/zig-cc)
    set(CUSTOM_AR ${CMAKE_CURRENT_LIST_DIR}/zig-ar)
    set(CUSTOM_RANLIB ${CMAKE_CURRENT_LIST_DIR}/zig-ranlib)
endif ()

set(CMAKE_C_COMPILER "${CUSTOM_CC}" CACHE FILEPATH "" FORCE)
set(CMAKE_C_COMPILER_AR "${CUSTOM_AR}" CACHE FILEPATH "" FORCE)
set(CMAKE_C_COMPILER_RANLIB "${CUSTOM_RANLIB}" CACHE FILEPATH "" FORCE)
set(CMAKE_CXX_COMPILER "${CUSTOM_CC}" CACHE FILEPATH "" FORCE)
set(CMAKE_CXX_COMPILER_AR "${CUSTOM_AR}" CACHE FILEPATH "" FORCE)
set(CMAKE_CXX_COMPILER_RANLIB "${CUSTOM_RANLIB}" CACHE FILEPATH "" FORCE)
set(CMAKE_AR "${CUSTOM_AR}" CACHE FILEPATH "" FORCE)
set(CMAKE_RANLIB "${CUSTOM_RANLIB}" CACHE FILEPATH "" FORCE)


set(CMAKE_C_COMPILER_WORKS TRUE)
set(CMAKE_CXX_COMPILER_WORKS TRUE)

set(BASE_COMPILER_FLAGS "")

if (DEFINED CPU_ARCHITECTURE_TARGET)
    string(APPEND BASE_COMPILER_FLAGS " -march=${CPU_ARCHITECTURE_TARGET}")
endif ()

string(APPEND BASE_COMPILER_FLAGS " -Oz")
string(APPEND BASE_COMPILER_FLAGS " -ffunction-sections")
string(APPEND BASE_COMPILER_FLAGS " -fdata-sections")
string(APPEND BASE_COMPILER_FLAGS " -fno-unwind-tables")
string(APPEND BASE_COMPILER_FLAGS " -fno-asynchronous-unwind-tables")
string(APPEND BASE_COMPILER_FLAGS " -fvisibility=hidden")


set(BASE_LINKER_FLAGS "")

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    string(APPEND BASE_LINKER_FLAGS " -Wl,--gc-sections")
    string(APPEND BASE_LINKER_FLAGS " -Wl,-s")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    string(APPEND BASE_LINKER_FLAGS " -Wl,-dead_strip")
    string(APPEND BASE_LINKER_FLAGS " -Wl,-dead_strip_dylibs")
    string(APPEND BASE_LINKER_FLAGS " -Wl,-x")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    # Requires -ffunction-sections and -fdata-sections
    string(APPEND BASE_LINKER_FLAGS " -Wl,--gc-sections")
    string(APPEND BASE_LINKER_FLAGS " -Wl,-s")
    string(APPEND BASE_LINKER_FLAGS " -Wl,--as-needed")
endif ()


set(CMAKE_C_FLAGS_INIT "${BASE_COMPILER_FLAGS}")
set(CMAKE_C_FLAGS_RELEASE_INIT "${BASE_COMPILER_FLAGS}")
set(CMAKE_CXX_FLAGS_INIT "${BASE_COMPILER_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE_INIT "${BASE_COMPILER_FLAGS}")
set(CMAKE_ASM_FLAGS_INIT "${BASE_COMPILER_FLAGS}")
set(CMAKE_ASM_FLAGS_RELEASE_INIT "${BASE_COMPILER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_INIT "${BASE_LINKER_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "${BASE_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS_INIT "${BASE_LINKER_FLAGS}")

set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

if (DEFINED TARGET_TRIPLE)
    set(CMAKE_C_COMPILER_TARGET "${TARGET_TRIPLE}" CACHE STRING "" FORCE)
    set(CMAKE_CXX_COMPILER_TARGET "${TARGET_TRIPLE}" CACHE STRING "" FORCE)
endif ()

set(CMAKE_BUILD_TYPE Release CACHE STRING "" FORCE)

message(STATUS "Compiling for ${TARGET_TRIPLE} with ${CMAKE_C_COMPILER} and ${CMAKE_AR}")
